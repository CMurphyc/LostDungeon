// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from PlayerInfo.proto</summary>
public static partial class PlayerInfoReflection {

  #region Descriptor
  /// <summary>File descriptor for PlayerInfo.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PlayerInfoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBQbGF5ZXJJbmZvLnByb3RvInYKClBsYXllckluZm8SEAoIcGxheWVySWQY",
          "ASABKAUSEAoIdXNlck5hbWUYAiABKAkSEwoEcm9sZRgDIAEoDjIFLlJvbGUS",
          "DwoHaXNSZWFkeRgEIAEoCBINCgVydW5lcxgFIAEoBRIPCgdmYWN0aW9uGAYg",
          "ASgFKjAKBFJvbGUSDAoIRU5HSU5FRVIQABIMCghHVUFSRElBThABEgwKCE1B",
          "R0lDSUFOEAJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Role), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "PlayerId", "UserName", "Role", "IsReady", "Runes", "Faction" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum Role {
  [pbr::OriginalName("ENGINEER")] Engineer = 0,
  [pbr::OriginalName("GUARDIAN")] Guardian = 1,
  [pbr::OriginalName("MAGICIAN")] Magician = 2,
}

#endregion

#region Messages
public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerInfoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    playerId_ = other.playerId_;
    userName_ = other.userName_;
    role_ = other.role_;
    isReady_ = other.isReady_;
    runes_ = other.runes_;
    faction_ = other.faction_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private int playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "userName" field.</summary>
  public const int UserNameFieldNumber = 2;
  private string userName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "role" field.</summary>
  public const int RoleFieldNumber = 3;
  private global::Role role_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Role Role {
    get { return role_; }
    set {
      role_ = value;
    }
  }

  /// <summary>Field number for the "isReady" field.</summary>
  public const int IsReadyFieldNumber = 4;
  private bool isReady_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReady {
    get { return isReady_; }
    set {
      isReady_ = value;
    }
  }

  /// <summary>Field number for the "runes" field.</summary>
  public const int RunesFieldNumber = 5;
  private int runes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Runes {
    get { return runes_; }
    set {
      runes_ = value;
    }
  }

  /// <summary>Field number for the "faction" field.</summary>
  public const int FactionFieldNumber = 6;
  private int faction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Faction {
    get { return faction_; }
    set {
      faction_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (UserName != other.UserName) return false;
    if (Role != other.Role) return false;
    if (IsReady != other.IsReady) return false;
    if (Runes != other.Runes) return false;
    if (Faction != other.Faction) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (UserName.Length != 0) hash ^= UserName.GetHashCode();
    if (Role != 0) hash ^= Role.GetHashCode();
    if (IsReady != false) hash ^= IsReady.GetHashCode();
    if (Runes != 0) hash ^= Runes.GetHashCode();
    if (Faction != 0) hash ^= Faction.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerId);
    }
    if (UserName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(UserName);
    }
    if (Role != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Role);
    }
    if (IsReady != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsReady);
    }
    if (Runes != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Runes);
    }
    if (Faction != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Faction);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
    }
    if (UserName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (Role != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
    }
    if (IsReady != false) {
      size += 1 + 1;
    }
    if (Runes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Runes);
    }
    if (Faction != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.UserName.Length != 0) {
      UserName = other.UserName;
    }
    if (other.Role != 0) {
      Role = other.Role;
    }
    if (other.IsReady != false) {
      IsReady = other.IsReady;
    }
    if (other.Runes != 0) {
      Runes = other.Runes;
    }
    if (other.Faction != 0) {
      Faction = other.Faction;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt32();
          break;
        }
        case 18: {
          UserName = input.ReadString();
          break;
        }
        case 24: {
          role_ = (global::Role) input.ReadEnum();
          break;
        }
        case 32: {
          IsReady = input.ReadBool();
          break;
        }
        case 40: {
          Runes = input.ReadInt32();
          break;
        }
        case 48: {
          Faction = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
