// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RoomInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from RoomInfo.proto</summary>
public static partial class RoomInfoReflection {

  #region Descriptor
  /// <summary>File descriptor for RoomInfo.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RoomInfoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5Sb29tSW5mby5wcm90byJsCghSb29tSW5mbxIOCgZyb29taWQYASABKAUS",
          "DwoHbWF4c2l6ZRgCIAEoBRITCgtjdXJyZW50c2l6ZRgDIAEoBRINCgVvd25l",
          "chgEIAEoCRIbCghyb29tVHlwZRgFIAEoDjIJLlJvb21UeXBlKhwKCFJvb21U",
          "eXBlEgcKA1BWRRAAEgcKA1BWUBABYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RoomType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomInfo), global::RoomInfo.Parser, new[]{ "Roomid", "Maxsize", "Currentsize", "Owner", "RoomType" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum RoomType {
  [pbr::OriginalName("PVE")] Pve = 0,
  [pbr::OriginalName("PVP")] Pvp = 1,
}

#endregion

#region Messages
public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
  private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomInfoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo(RoomInfo other) : this() {
    roomid_ = other.roomid_;
    maxsize_ = other.maxsize_;
    currentsize_ = other.currentsize_;
    owner_ = other.owner_;
    roomType_ = other.roomType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo Clone() {
    return new RoomInfo(this);
  }

  /// <summary>Field number for the "roomid" field.</summary>
  public const int RoomidFieldNumber = 1;
  private int roomid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Roomid {
    get { return roomid_; }
    set {
      roomid_ = value;
    }
  }

  /// <summary>Field number for the "maxsize" field.</summary>
  public const int MaxsizeFieldNumber = 2;
  private int maxsize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Maxsize {
    get { return maxsize_; }
    set {
      maxsize_ = value;
    }
  }

  /// <summary>Field number for the "currentsize" field.</summary>
  public const int CurrentsizeFieldNumber = 3;
  private int currentsize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Currentsize {
    get { return currentsize_; }
    set {
      currentsize_ = value;
    }
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 4;
  private string owner_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomType" field.</summary>
  public const int RoomTypeFieldNumber = 5;
  private global::RoomType roomType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomType RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Roomid != other.Roomid) return false;
    if (Maxsize != other.Maxsize) return false;
    if (Currentsize != other.Currentsize) return false;
    if (Owner != other.Owner) return false;
    if (RoomType != other.RoomType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Roomid != 0) hash ^= Roomid.GetHashCode();
    if (Maxsize != 0) hash ^= Maxsize.GetHashCode();
    if (Currentsize != 0) hash ^= Currentsize.GetHashCode();
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Roomid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Roomid);
    }
    if (Maxsize != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Maxsize);
    }
    if (Currentsize != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Currentsize);
    }
    if (Owner.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Owner);
    }
    if (RoomType != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) RoomType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Roomid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomid);
    }
    if (Maxsize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxsize);
    }
    if (Currentsize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Currentsize);
    }
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomInfo other) {
    if (other == null) {
      return;
    }
    if (other.Roomid != 0) {
      Roomid = other.Roomid;
    }
    if (other.Maxsize != 0) {
      Maxsize = other.Maxsize;
    }
    if (other.Currentsize != 0) {
      Currentsize = other.Currentsize;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Roomid = input.ReadInt32();
          break;
        }
        case 16: {
          Maxsize = input.ReadInt32();
          break;
        }
        case 24: {
          Currentsize = input.ReadInt32();
          break;
        }
        case 34: {
          Owner = input.ReadString();
          break;
        }
        case 40: {
          roomType_ = (global::RoomType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
