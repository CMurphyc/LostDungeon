// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BattleInput.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from BattleInput.proto</summary>
public static partial class BattleInputReflection {

  #region Descriptor
  /// <summary>File descriptor for BattleInput.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BattleInputReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFCYXR0bGVJbnB1dC5wcm90byKSAQoLQmF0dGxlSW5wdXQSCwoDdWlkGAEg",
          "ASgFEhYKDm1vdmVEaXJlY3Rpb25YGAIgASgFEhYKDm1vdmVEaXJlY3Rpb25Z",
          "GAMgASgFEhIKCmF0dGFja1R5cGUYBCABKAUSGAoQYXR0YWNrRGlyZWN0aW9u",
          "WBgFIAEoBRIYChBhdHRhY2tEaXJlY3Rpb25ZGAYgASgFYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BattleInput), global::BattleInput.Parser, new[]{ "Uid", "MoveDirectionX", "MoveDirectionY", "AttackType", "AttackDirectionX", "AttackDirectionY" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class BattleInput : pb::IMessage<BattleInput> {
  private static readonly pb::MessageParser<BattleInput> _parser = new pb::MessageParser<BattleInput>(() => new BattleInput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BattleInput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleInputReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleInput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleInput(BattleInput other) : this() {
    uid_ = other.uid_;
    moveDirectionX_ = other.moveDirectionX_;
    moveDirectionY_ = other.moveDirectionY_;
    attackType_ = other.attackType_;
    attackDirectionX_ = other.attackDirectionX_;
    attackDirectionY_ = other.attackDirectionY_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleInput Clone() {
    return new BattleInput(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private int uid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Uid {
    get { return uid_; }
    set {
      uid_ = value;
    }
  }

  /// <summary>Field number for the "moveDirectionX" field.</summary>
  public const int MoveDirectionXFieldNumber = 2;
  private int moveDirectionX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MoveDirectionX {
    get { return moveDirectionX_; }
    set {
      moveDirectionX_ = value;
    }
  }

  /// <summary>Field number for the "moveDirectionY" field.</summary>
  public const int MoveDirectionYFieldNumber = 3;
  private int moveDirectionY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MoveDirectionY {
    get { return moveDirectionY_; }
    set {
      moveDirectionY_ = value;
    }
  }

  /// <summary>Field number for the "attackType" field.</summary>
  public const int AttackTypeFieldNumber = 4;
  private int attackType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AttackType {
    get { return attackType_; }
    set {
      attackType_ = value;
    }
  }

  /// <summary>Field number for the "attackDirectionX" field.</summary>
  public const int AttackDirectionXFieldNumber = 5;
  private int attackDirectionX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AttackDirectionX {
    get { return attackDirectionX_; }
    set {
      attackDirectionX_ = value;
    }
  }

  /// <summary>Field number for the "attackDirectionY" field.</summary>
  public const int AttackDirectionYFieldNumber = 6;
  private int attackDirectionY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AttackDirectionY {
    get { return attackDirectionY_; }
    set {
      attackDirectionY_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BattleInput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BattleInput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (MoveDirectionX != other.MoveDirectionX) return false;
    if (MoveDirectionY != other.MoveDirectionY) return false;
    if (AttackType != other.AttackType) return false;
    if (AttackDirectionX != other.AttackDirectionX) return false;
    if (AttackDirectionY != other.AttackDirectionY) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid != 0) hash ^= Uid.GetHashCode();
    if (MoveDirectionX != 0) hash ^= MoveDirectionX.GetHashCode();
    if (MoveDirectionY != 0) hash ^= MoveDirectionY.GetHashCode();
    if (AttackType != 0) hash ^= AttackType.GetHashCode();
    if (AttackDirectionX != 0) hash ^= AttackDirectionX.GetHashCode();
    if (AttackDirectionY != 0) hash ^= AttackDirectionY.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Uid);
    }
    if (MoveDirectionX != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MoveDirectionX);
    }
    if (MoveDirectionY != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MoveDirectionY);
    }
    if (AttackType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AttackType);
    }
    if (AttackDirectionX != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(AttackDirectionX);
    }
    if (AttackDirectionY != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(AttackDirectionY);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
    }
    if (MoveDirectionX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveDirectionX);
    }
    if (MoveDirectionY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveDirectionY);
    }
    if (AttackType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackType);
    }
    if (AttackDirectionX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackDirectionX);
    }
    if (AttackDirectionY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackDirectionY);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BattleInput other) {
    if (other == null) {
      return;
    }
    if (other.Uid != 0) {
      Uid = other.Uid;
    }
    if (other.MoveDirectionX != 0) {
      MoveDirectionX = other.MoveDirectionX;
    }
    if (other.MoveDirectionY != 0) {
      MoveDirectionY = other.MoveDirectionY;
    }
    if (other.AttackType != 0) {
      AttackType = other.AttackType;
    }
    if (other.AttackDirectionX != 0) {
      AttackDirectionX = other.AttackDirectionX;
    }
    if (other.AttackDirectionY != 0) {
      AttackDirectionY = other.AttackDirectionY;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Uid = input.ReadInt32();
          break;
        }
        case 16: {
          MoveDirectionX = input.ReadInt32();
          break;
        }
        case 24: {
          MoveDirectionY = input.ReadInt32();
          break;
        }
        case 32: {
          AttackType = input.ReadInt32();
          break;
        }
        case 40: {
          AttackDirectionX = input.ReadInt32();
          break;
        }
        case 48: {
          AttackDirectionY = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
